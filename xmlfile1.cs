//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 


/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
[global::System.Serializable()]
[global::System.ComponentModel.DesignerCategoryAttribute("code")]
[global::System.ComponentModel.ToolboxItem(true)]
[global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
[global::System.Xml.Serialization.XmlRootAttribute("NewDataSet")]
[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
public partial class NewDataSet : global::System.Data.DataSet {
    
    private ISPFSkeletonParserDataTable tableISPFSkeletonParser;
    
    private DirectoryDataTable tableDirectory;
    
    private ExcelOutputDataTable tableExcelOutput;
    
    private XMLOutputDataTable tableXMLOutput;
    
    private FixedOutputDataTable tableFixedOutput;
    
    private ConfigurationDataTable tableConfiguration;
    
    private IgnoreSkelDataTable tableIgnoreSkel;
    
    private UnimbeddedDataTable tableUnimbedded;
    
    private global::System.Data.DataRelation relationISPFSkeletonParser_Directory;
    
    private global::System.Data.DataRelation relationISPFSkeletonParser_ExcelOutput;
    
    private global::System.Data.DataRelation relationISPFSkeletonParser_XMLOutput;
    
    private global::System.Data.DataRelation relationISPFSkeletonParser_FixedOutput;
    
    private global::System.Data.DataRelation relationFixedOutput_Configuration;
    
    private global::System.Data.DataRelation relationISPFSkeletonParser_IgnoreSkel;
    
    private global::System.Data.DataRelation relationISPFSkeletonParser_Unimbedded;
    
    private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public NewDataSet() {
        this.BeginInit();
        this.InitClass();
        global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        base.Relations.CollectionChanged += schemaChangedHandler;
        this.EndInit();
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected NewDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
            base(info, context, false) {
        if ((this.IsBinarySerialized(info, context) == true)) {
            this.InitVars(false);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler1;
            this.Relations.CollectionChanged += schemaChangedHandler1;
            return;
        }
        string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
        if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
            global::System.Data.DataSet ds = new global::System.Data.DataSet();
            ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            if ((ds.Tables["ISPFSkeletonParser"] != null)) {
                base.Tables.Add(new ISPFSkeletonParserDataTable(ds.Tables["ISPFSkeletonParser"]));
            }
            if ((ds.Tables["Directory"] != null)) {
                base.Tables.Add(new DirectoryDataTable(ds.Tables["Directory"]));
            }
            if ((ds.Tables["ExcelOutput"] != null)) {
                base.Tables.Add(new ExcelOutputDataTable(ds.Tables["ExcelOutput"]));
            }
            if ((ds.Tables["XMLOutput"] != null)) {
                base.Tables.Add(new XMLOutputDataTable(ds.Tables["XMLOutput"]));
            }
            if ((ds.Tables["FixedOutput"] != null)) {
                base.Tables.Add(new FixedOutputDataTable(ds.Tables["FixedOutput"]));
            }
            if ((ds.Tables["Configuration"] != null)) {
                base.Tables.Add(new ConfigurationDataTable(ds.Tables["Configuration"]));
            }
            if ((ds.Tables["IgnoreSkel"] != null)) {
                base.Tables.Add(new IgnoreSkelDataTable(ds.Tables["IgnoreSkel"]));
            }
            if ((ds.Tables["Unimbedded"] != null)) {
                base.Tables.Add(new UnimbeddedDataTable(ds.Tables["Unimbedded"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
        }
        this.GetSerializationData(info, context);
        global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        this.Relations.CollectionChanged += schemaChangedHandler;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public ISPFSkeletonParserDataTable ISPFSkeletonParser {
        get {
            return this.tableISPFSkeletonParser;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public DirectoryDataTable Directory {
        get {
            return this.tableDirectory;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public ExcelOutputDataTable ExcelOutput {
        get {
            return this.tableExcelOutput;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public XMLOutputDataTable XMLOutput {
        get {
            return this.tableXMLOutput;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public FixedOutputDataTable FixedOutput {
        get {
            return this.tableFixedOutput;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public ConfigurationDataTable Configuration {
        get {
            return this.tableConfiguration;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public IgnoreSkelDataTable IgnoreSkel {
        get {
            return this.tableIgnoreSkel;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public UnimbeddedDataTable Unimbedded {
        get {
            return this.tableUnimbedded;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.BrowsableAttribute(true)]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
    public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
        get {
            return this._schemaSerializationMode;
        }
        set {
            this._schemaSerializationMode = value;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new global::System.Data.DataTableCollection Tables {
        get {
            return base.Tables;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new global::System.Data.DataRelationCollection Relations {
        get {
            return base.Relations;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void InitializeDerivedDataSet() {
        this.BeginInit();
        this.InitClass();
        this.EndInit();
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public override global::System.Data.DataSet Clone() {
        NewDataSet cln = ((NewDataSet)(base.Clone()));
        cln.InitVars();
        cln.SchemaSerializationMode = this.SchemaSerializationMode;
        return cln;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeTables() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeRelations() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
        if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
            this.Reset();
            global::System.Data.DataSet ds = new global::System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ISPFSkeletonParser"] != null)) {
                base.Tables.Add(new ISPFSkeletonParserDataTable(ds.Tables["ISPFSkeletonParser"]));
            }
            if ((ds.Tables["Directory"] != null)) {
                base.Tables.Add(new DirectoryDataTable(ds.Tables["Directory"]));
            }
            if ((ds.Tables["ExcelOutput"] != null)) {
                base.Tables.Add(new ExcelOutputDataTable(ds.Tables["ExcelOutput"]));
            }
            if ((ds.Tables["XMLOutput"] != null)) {
                base.Tables.Add(new XMLOutputDataTable(ds.Tables["XMLOutput"]));
            }
            if ((ds.Tables["FixedOutput"] != null)) {
                base.Tables.Add(new FixedOutputDataTable(ds.Tables["FixedOutput"]));
            }
            if ((ds.Tables["Configuration"] != null)) {
                base.Tables.Add(new ConfigurationDataTable(ds.Tables["Configuration"]));
            }
            if ((ds.Tables["IgnoreSkel"] != null)) {
                base.Tables.Add(new IgnoreSkelDataTable(ds.Tables["IgnoreSkel"]));
            }
            if ((ds.Tables["Unimbedded"] != null)) {
                base.Tables.Add(new UnimbeddedDataTable(ds.Tables["Unimbedded"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXml(reader);
            this.InitVars();
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
        global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
        this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
        stream.Position = 0;
        return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars() {
        this.InitVars(true);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars(bool initTable) {
        this.tableISPFSkeletonParser = ((ISPFSkeletonParserDataTable)(base.Tables["ISPFSkeletonParser"]));
        if ((initTable == true)) {
            if ((this.tableISPFSkeletonParser != null)) {
                this.tableISPFSkeletonParser.InitVars();
            }
        }
        this.tableDirectory = ((DirectoryDataTable)(base.Tables["Directory"]));
        if ((initTable == true)) {
            if ((this.tableDirectory != null)) {
                this.tableDirectory.InitVars();
            }
        }
        this.tableExcelOutput = ((ExcelOutputDataTable)(base.Tables["ExcelOutput"]));
        if ((initTable == true)) {
            if ((this.tableExcelOutput != null)) {
                this.tableExcelOutput.InitVars();
            }
        }
        this.tableXMLOutput = ((XMLOutputDataTable)(base.Tables["XMLOutput"]));
        if ((initTable == true)) {
            if ((this.tableXMLOutput != null)) {
                this.tableXMLOutput.InitVars();
            }
        }
        this.tableFixedOutput = ((FixedOutputDataTable)(base.Tables["FixedOutput"]));
        if ((initTable == true)) {
            if ((this.tableFixedOutput != null)) {
                this.tableFixedOutput.InitVars();
            }
        }
        this.tableConfiguration = ((ConfigurationDataTable)(base.Tables["Configuration"]));
        if ((initTable == true)) {
            if ((this.tableConfiguration != null)) {
                this.tableConfiguration.InitVars();
            }
        }
        this.tableIgnoreSkel = ((IgnoreSkelDataTable)(base.Tables["IgnoreSkel"]));
        if ((initTable == true)) {
            if ((this.tableIgnoreSkel != null)) {
                this.tableIgnoreSkel.InitVars();
            }
        }
        this.tableUnimbedded = ((UnimbeddedDataTable)(base.Tables["Unimbedded"]));
        if ((initTable == true)) {
            if ((this.tableUnimbedded != null)) {
                this.tableUnimbedded.InitVars();
            }
        }
        this.relationISPFSkeletonParser_Directory = this.Relations["ISPFSkeletonParser_Directory"];
        this.relationISPFSkeletonParser_ExcelOutput = this.Relations["ISPFSkeletonParser_ExcelOutput"];
        this.relationISPFSkeletonParser_XMLOutput = this.Relations["ISPFSkeletonParser_XMLOutput"];
        this.relationISPFSkeletonParser_FixedOutput = this.Relations["ISPFSkeletonParser_FixedOutput"];
        this.relationFixedOutput_Configuration = this.Relations["FixedOutput_Configuration"];
        this.relationISPFSkeletonParser_IgnoreSkel = this.Relations["ISPFSkeletonParser_IgnoreSkel"];
        this.relationISPFSkeletonParser_Unimbedded = this.Relations["ISPFSkeletonParser_Unimbedded"];
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void InitClass() {
        this.DataSetName = "NewDataSet";
        this.Prefix = "";
        this.EnforceConstraints = true;
        this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        this.tableISPFSkeletonParser = new ISPFSkeletonParserDataTable();
        base.Tables.Add(this.tableISPFSkeletonParser);
        this.tableDirectory = new DirectoryDataTable();
        base.Tables.Add(this.tableDirectory);
        this.tableExcelOutput = new ExcelOutputDataTable();
        base.Tables.Add(this.tableExcelOutput);
        this.tableXMLOutput = new XMLOutputDataTable();
        base.Tables.Add(this.tableXMLOutput);
        this.tableFixedOutput = new FixedOutputDataTable();
        base.Tables.Add(this.tableFixedOutput);
        this.tableConfiguration = new ConfigurationDataTable();
        base.Tables.Add(this.tableConfiguration);
        this.tableIgnoreSkel = new IgnoreSkelDataTable();
        base.Tables.Add(this.tableIgnoreSkel);
        this.tableUnimbedded = new UnimbeddedDataTable();
        base.Tables.Add(this.tableUnimbedded);
        global::System.Data.ForeignKeyConstraint fkc;
        fkc = new global::System.Data.ForeignKeyConstraint("ISPFSkeletonParser_Directory", new global::System.Data.DataColumn[] {
                    this.tableISPFSkeletonParser.ISPFSkeletonParser_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableDirectory.ISPFSkeletonParser_IdColumn});
        this.tableDirectory.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("ISPFSkeletonParser_ExcelOutput", new global::System.Data.DataColumn[] {
                    this.tableISPFSkeletonParser.ISPFSkeletonParser_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableExcelOutput.ISPFSkeletonParser_IdColumn});
        this.tableExcelOutput.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("ISPFSkeletonParser_XMLOutput", new global::System.Data.DataColumn[] {
                    this.tableISPFSkeletonParser.ISPFSkeletonParser_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableXMLOutput.ISPFSkeletonParser_IdColumn});
        this.tableXMLOutput.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("ISPFSkeletonParser_FixedOutput", new global::System.Data.DataColumn[] {
                    this.tableISPFSkeletonParser.ISPFSkeletonParser_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableFixedOutput.ISPFSkeletonParser_IdColumn});
        this.tableFixedOutput.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("FixedOutput_Configuration", new global::System.Data.DataColumn[] {
                    this.tableFixedOutput.FixedOutput_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableConfiguration.FixedOutput_IdColumn});
        this.tableConfiguration.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("ISPFSkeletonParser_IgnoreSkel", new global::System.Data.DataColumn[] {
                    this.tableISPFSkeletonParser.ISPFSkeletonParser_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableIgnoreSkel.ISPFSkeletonParser_IdColumn});
        this.tableIgnoreSkel.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("ISPFSkeletonParser_Unimbedded", new global::System.Data.DataColumn[] {
                    this.tableISPFSkeletonParser.ISPFSkeletonParser_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableUnimbedded.ISPFSkeletonParser_IdColumn});
        this.tableUnimbedded.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        this.relationISPFSkeletonParser_Directory = new global::System.Data.DataRelation("ISPFSkeletonParser_Directory", new global::System.Data.DataColumn[] {
                    this.tableISPFSkeletonParser.ISPFSkeletonParser_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableDirectory.ISPFSkeletonParser_IdColumn}, false);
        this.relationISPFSkeletonParser_Directory.Nested = true;
        this.Relations.Add(this.relationISPFSkeletonParser_Directory);
        this.relationISPFSkeletonParser_ExcelOutput = new global::System.Data.DataRelation("ISPFSkeletonParser_ExcelOutput", new global::System.Data.DataColumn[] {
                    this.tableISPFSkeletonParser.ISPFSkeletonParser_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableExcelOutput.ISPFSkeletonParser_IdColumn}, false);
        this.relationISPFSkeletonParser_ExcelOutput.Nested = true;
        this.Relations.Add(this.relationISPFSkeletonParser_ExcelOutput);
        this.relationISPFSkeletonParser_XMLOutput = new global::System.Data.DataRelation("ISPFSkeletonParser_XMLOutput", new global::System.Data.DataColumn[] {
                    this.tableISPFSkeletonParser.ISPFSkeletonParser_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableXMLOutput.ISPFSkeletonParser_IdColumn}, false);
        this.relationISPFSkeletonParser_XMLOutput.Nested = true;
        this.Relations.Add(this.relationISPFSkeletonParser_XMLOutput);
        this.relationISPFSkeletonParser_FixedOutput = new global::System.Data.DataRelation("ISPFSkeletonParser_FixedOutput", new global::System.Data.DataColumn[] {
                    this.tableISPFSkeletonParser.ISPFSkeletonParser_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableFixedOutput.ISPFSkeletonParser_IdColumn}, false);
        this.relationISPFSkeletonParser_FixedOutput.Nested = true;
        this.Relations.Add(this.relationISPFSkeletonParser_FixedOutput);
        this.relationFixedOutput_Configuration = new global::System.Data.DataRelation("FixedOutput_Configuration", new global::System.Data.DataColumn[] {
                    this.tableFixedOutput.FixedOutput_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableConfiguration.FixedOutput_IdColumn}, false);
        this.relationFixedOutput_Configuration.Nested = true;
        this.Relations.Add(this.relationFixedOutput_Configuration);
        this.relationISPFSkeletonParser_IgnoreSkel = new global::System.Data.DataRelation("ISPFSkeletonParser_IgnoreSkel", new global::System.Data.DataColumn[] {
                    this.tableISPFSkeletonParser.ISPFSkeletonParser_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableIgnoreSkel.ISPFSkeletonParser_IdColumn}, false);
        this.relationISPFSkeletonParser_IgnoreSkel.Nested = true;
        this.Relations.Add(this.relationISPFSkeletonParser_IgnoreSkel);
        this.relationISPFSkeletonParser_Unimbedded = new global::System.Data.DataRelation("ISPFSkeletonParser_Unimbedded", new global::System.Data.DataColumn[] {
                    this.tableISPFSkeletonParser.ISPFSkeletonParser_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableUnimbedded.ISPFSkeletonParser_IdColumn}, false);
        this.relationISPFSkeletonParser_Unimbedded.Nested = true;
        this.Relations.Add(this.relationISPFSkeletonParser_Unimbedded);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeISPFSkeletonParser() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeDirectory() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeExcelOutput() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeXMLOutput() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeFixedOutput() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeConfiguration() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeIgnoreSkel() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeUnimbedded() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
        if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
            this.InitVars();
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
        NewDataSet ds = new NewDataSet();
        global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
        global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
        global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
        any.Namespace = ds.Namespace;
        sequence.Items.Add(any);
        type.Particle = sequence;
        global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
        if (xs.Contains(dsSchema.TargetNamespace)) {
            global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
            global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
            try {
                global::System.Xml.Schema.XmlSchema schema = null;
                dsSchema.Write(s1);
                for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                    schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                    s2.SetLength(0);
                    schema.Write(s2);
                    if ((s1.Length == s2.Length)) {
                        s1.Position = 0;
                        s2.Position = 0;
                        for (; ((s1.Position != s1.Length) 
                                    && (s1.ReadByte() == s2.ReadByte())); ) {
                            ;
                        }
                        if ((s1.Position == s1.Length)) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if ((s1 != null)) {
                    s1.Close();
                }
                if ((s2 != null)) {
                    s2.Close();
                }
            }
        }
        xs.Add(dsSchema);
        return type;
    }
    
    public delegate void ISPFSkeletonParserRowChangeEventHandler(object sender, ISPFSkeletonParserRowChangeEvent e);
    
    public delegate void DirectoryRowChangeEventHandler(object sender, DirectoryRowChangeEvent e);
    
    public delegate void ExcelOutputRowChangeEventHandler(object sender, ExcelOutputRowChangeEvent e);
    
    public delegate void XMLOutputRowChangeEventHandler(object sender, XMLOutputRowChangeEvent e);
    
    public delegate void FixedOutputRowChangeEventHandler(object sender, FixedOutputRowChangeEvent e);
    
    public delegate void ConfigurationRowChangeEventHandler(object sender, ConfigurationRowChangeEvent e);
    
    public delegate void IgnoreSkelRowChangeEventHandler(object sender, IgnoreSkelRowChangeEvent e);
    
    public delegate void UnimbeddedRowChangeEventHandler(object sender, UnimbeddedRowChangeEvent e);
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class ISPFSkeletonParserDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnQueryDisplayName;
        
        private global::System.Data.DataColumn columnImbedRecurseFail;
        
        private global::System.Data.DataColumn columnDebugInputLine;
        
        private global::System.Data.DataColumn columnISPFSkeletonParser_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ISPFSkeletonParserDataTable() {
            this.TableName = "ISPFSkeletonParser";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal ISPFSkeletonParserDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ISPFSkeletonParserDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn QueryDisplayNameColumn {
            get {
                return this.columnQueryDisplayName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ImbedRecurseFailColumn {
            get {
                return this.columnImbedRecurseFail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn DebugInputLineColumn {
            get {
                return this.columnDebugInputLine;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ISPFSkeletonParser_IdColumn {
            get {
                return this.columnISPFSkeletonParser_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ISPFSkeletonParserRow this[int index] {
            get {
                return ((ISPFSkeletonParserRow)(this.Rows[index]));
            }
        }
        
        public event ISPFSkeletonParserRowChangeEventHandler ISPFSkeletonParserRowChanging;
        
        public event ISPFSkeletonParserRowChangeEventHandler ISPFSkeletonParserRowChanged;
        
        public event ISPFSkeletonParserRowChangeEventHandler ISPFSkeletonParserRowDeleting;
        
        public event ISPFSkeletonParserRowChangeEventHandler ISPFSkeletonParserRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddISPFSkeletonParserRow(ISPFSkeletonParserRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ISPFSkeletonParserRow AddISPFSkeletonParserRow(string QueryDisplayName, string ImbedRecurseFail, string DebugInputLine) {
            ISPFSkeletonParserRow rowISPFSkeletonParserRow = ((ISPFSkeletonParserRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    QueryDisplayName,
                    ImbedRecurseFail,
                    DebugInputLine,
                    null};
            rowISPFSkeletonParserRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowISPFSkeletonParserRow);
            return rowISPFSkeletonParserRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            ISPFSkeletonParserDataTable cln = ((ISPFSkeletonParserDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new ISPFSkeletonParserDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnQueryDisplayName = base.Columns["QueryDisplayName"];
            this.columnImbedRecurseFail = base.Columns["ImbedRecurseFail"];
            this.columnDebugInputLine = base.Columns["DebugInputLine"];
            this.columnISPFSkeletonParser_Id = base.Columns["ISPFSkeletonParser_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnQueryDisplayName = new global::System.Data.DataColumn("QueryDisplayName", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnQueryDisplayName);
            this.columnImbedRecurseFail = new global::System.Data.DataColumn("ImbedRecurseFail", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnImbedRecurseFail);
            this.columnDebugInputLine = new global::System.Data.DataColumn("DebugInputLine", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnDebugInputLine);
            this.columnISPFSkeletonParser_Id = new global::System.Data.DataColumn("ISPFSkeletonParser_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnISPFSkeletonParser_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnISPFSkeletonParser_Id}, true));
            this.columnISPFSkeletonParser_Id.AutoIncrement = true;
            this.columnISPFSkeletonParser_Id.AllowDBNull = false;
            this.columnISPFSkeletonParser_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ISPFSkeletonParserRow NewISPFSkeletonParserRow() {
            return ((ISPFSkeletonParserRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new ISPFSkeletonParserRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(ISPFSkeletonParserRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.ISPFSkeletonParserRowChanged != null)) {
                this.ISPFSkeletonParserRowChanged(this, new ISPFSkeletonParserRowChangeEvent(((ISPFSkeletonParserRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.ISPFSkeletonParserRowChanging != null)) {
                this.ISPFSkeletonParserRowChanging(this, new ISPFSkeletonParserRowChangeEvent(((ISPFSkeletonParserRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.ISPFSkeletonParserRowDeleted != null)) {
                this.ISPFSkeletonParserRowDeleted(this, new ISPFSkeletonParserRowChangeEvent(((ISPFSkeletonParserRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.ISPFSkeletonParserRowDeleting != null)) {
                this.ISPFSkeletonParserRowDeleting(this, new ISPFSkeletonParserRowChangeEvent(((ISPFSkeletonParserRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveISPFSkeletonParserRow(ISPFSkeletonParserRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "ISPFSkeletonParserDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class DirectoryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnDirectoryName;
        
        private global::System.Data.DataColumn columnDirectoryLabel;
        
        private global::System.Data.DataColumn columnDirectoryHostName;
        
        private global::System.Data.DataColumn columnISPFSkeletonParser_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DirectoryDataTable() {
            this.TableName = "Directory";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal DirectoryDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DirectoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn DirectoryNameColumn {
            get {
                return this.columnDirectoryName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn DirectoryLabelColumn {
            get {
                return this.columnDirectoryLabel;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn DirectoryHostNameColumn {
            get {
                return this.columnDirectoryHostName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ISPFSkeletonParser_IdColumn {
            get {
                return this.columnISPFSkeletonParser_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DirectoryRow this[int index] {
            get {
                return ((DirectoryRow)(this.Rows[index]));
            }
        }
        
        public event DirectoryRowChangeEventHandler DirectoryRowChanging;
        
        public event DirectoryRowChangeEventHandler DirectoryRowChanged;
        
        public event DirectoryRowChangeEventHandler DirectoryRowDeleting;
        
        public event DirectoryRowChangeEventHandler DirectoryRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddDirectoryRow(DirectoryRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DirectoryRow AddDirectoryRow(string DirectoryName, string DirectoryLabel, string DirectoryHostName, ISPFSkeletonParserRow parentISPFSkeletonParserRowByISPFSkeletonParser_Directory) {
            DirectoryRow rowDirectoryRow = ((DirectoryRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    DirectoryName,
                    DirectoryLabel,
                    DirectoryHostName,
                    null};
            if ((parentISPFSkeletonParserRowByISPFSkeletonParser_Directory != null)) {
                columnValuesArray[3] = parentISPFSkeletonParserRowByISPFSkeletonParser_Directory[3];
            }
            rowDirectoryRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowDirectoryRow);
            return rowDirectoryRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            DirectoryDataTable cln = ((DirectoryDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new DirectoryDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnDirectoryName = base.Columns["DirectoryName"];
            this.columnDirectoryLabel = base.Columns["DirectoryLabel"];
            this.columnDirectoryHostName = base.Columns["DirectoryHostName"];
            this.columnISPFSkeletonParser_Id = base.Columns["ISPFSkeletonParser_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnDirectoryName = new global::System.Data.DataColumn("DirectoryName", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnDirectoryName);
            this.columnDirectoryLabel = new global::System.Data.DataColumn("DirectoryLabel", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnDirectoryLabel);
            this.columnDirectoryHostName = new global::System.Data.DataColumn("DirectoryHostName", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnDirectoryHostName);
            this.columnISPFSkeletonParser_Id = new global::System.Data.DataColumn("ISPFSkeletonParser_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnISPFSkeletonParser_Id);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DirectoryRow NewDirectoryRow() {
            return ((DirectoryRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new DirectoryRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(DirectoryRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.DirectoryRowChanged != null)) {
                this.DirectoryRowChanged(this, new DirectoryRowChangeEvent(((DirectoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.DirectoryRowChanging != null)) {
                this.DirectoryRowChanging(this, new DirectoryRowChangeEvent(((DirectoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.DirectoryRowDeleted != null)) {
                this.DirectoryRowDeleted(this, new DirectoryRowChangeEvent(((DirectoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.DirectoryRowDeleting != null)) {
                this.DirectoryRowDeleting(this, new DirectoryRowChangeEvent(((DirectoryRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveDirectoryRow(DirectoryRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "DirectoryDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class ExcelOutputDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnExcelOutputFolder;
        
        private global::System.Data.DataColumn columnExcelOutputHLQ;
        
        private global::System.Data.DataColumn columnISPFSkeletonParser_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ExcelOutputDataTable() {
            this.TableName = "ExcelOutput";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal ExcelOutputDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ExcelOutputDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ExcelOutputFolderColumn {
            get {
                return this.columnExcelOutputFolder;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ExcelOutputHLQColumn {
            get {
                return this.columnExcelOutputHLQ;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ISPFSkeletonParser_IdColumn {
            get {
                return this.columnISPFSkeletonParser_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ExcelOutputRow this[int index] {
            get {
                return ((ExcelOutputRow)(this.Rows[index]));
            }
        }
        
        public event ExcelOutputRowChangeEventHandler ExcelOutputRowChanging;
        
        public event ExcelOutputRowChangeEventHandler ExcelOutputRowChanged;
        
        public event ExcelOutputRowChangeEventHandler ExcelOutputRowDeleting;
        
        public event ExcelOutputRowChangeEventHandler ExcelOutputRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddExcelOutputRow(ExcelOutputRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ExcelOutputRow AddExcelOutputRow(string ExcelOutputFolder, string ExcelOutputHLQ, ISPFSkeletonParserRow parentISPFSkeletonParserRowByISPFSkeletonParser_ExcelOutput) {
            ExcelOutputRow rowExcelOutputRow = ((ExcelOutputRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    ExcelOutputFolder,
                    ExcelOutputHLQ,
                    null};
            if ((parentISPFSkeletonParserRowByISPFSkeletonParser_ExcelOutput != null)) {
                columnValuesArray[2] = parentISPFSkeletonParserRowByISPFSkeletonParser_ExcelOutput[3];
            }
            rowExcelOutputRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowExcelOutputRow);
            return rowExcelOutputRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            ExcelOutputDataTable cln = ((ExcelOutputDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new ExcelOutputDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnExcelOutputFolder = base.Columns["ExcelOutputFolder"];
            this.columnExcelOutputHLQ = base.Columns["ExcelOutputHLQ"];
            this.columnISPFSkeletonParser_Id = base.Columns["ISPFSkeletonParser_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnExcelOutputFolder = new global::System.Data.DataColumn("ExcelOutputFolder", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnExcelOutputFolder);
            this.columnExcelOutputHLQ = new global::System.Data.DataColumn("ExcelOutputHLQ", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnExcelOutputHLQ);
            this.columnISPFSkeletonParser_Id = new global::System.Data.DataColumn("ISPFSkeletonParser_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnISPFSkeletonParser_Id);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ExcelOutputRow NewExcelOutputRow() {
            return ((ExcelOutputRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new ExcelOutputRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(ExcelOutputRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.ExcelOutputRowChanged != null)) {
                this.ExcelOutputRowChanged(this, new ExcelOutputRowChangeEvent(((ExcelOutputRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.ExcelOutputRowChanging != null)) {
                this.ExcelOutputRowChanging(this, new ExcelOutputRowChangeEvent(((ExcelOutputRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.ExcelOutputRowDeleted != null)) {
                this.ExcelOutputRowDeleted(this, new ExcelOutputRowChangeEvent(((ExcelOutputRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.ExcelOutputRowDeleting != null)) {
                this.ExcelOutputRowDeleting(this, new ExcelOutputRowChangeEvent(((ExcelOutputRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveExcelOutputRow(ExcelOutputRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "ExcelOutputDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class XMLOutputDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnXMLOutputFolder;
        
        private global::System.Data.DataColumn columnXMLOutputHLQ;
        
        private global::System.Data.DataColumn columnISPFSkeletonParser_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public XMLOutputDataTable() {
            this.TableName = "XMLOutput";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal XMLOutputDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected XMLOutputDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn XMLOutputFolderColumn {
            get {
                return this.columnXMLOutputFolder;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn XMLOutputHLQColumn {
            get {
                return this.columnXMLOutputHLQ;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ISPFSkeletonParser_IdColumn {
            get {
                return this.columnISPFSkeletonParser_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public XMLOutputRow this[int index] {
            get {
                return ((XMLOutputRow)(this.Rows[index]));
            }
        }
        
        public event XMLOutputRowChangeEventHandler XMLOutputRowChanging;
        
        public event XMLOutputRowChangeEventHandler XMLOutputRowChanged;
        
        public event XMLOutputRowChangeEventHandler XMLOutputRowDeleting;
        
        public event XMLOutputRowChangeEventHandler XMLOutputRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddXMLOutputRow(XMLOutputRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public XMLOutputRow AddXMLOutputRow(string XMLOutputFolder, string XMLOutputHLQ, ISPFSkeletonParserRow parentISPFSkeletonParserRowByISPFSkeletonParser_XMLOutput) {
            XMLOutputRow rowXMLOutputRow = ((XMLOutputRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    XMLOutputFolder,
                    XMLOutputHLQ,
                    null};
            if ((parentISPFSkeletonParserRowByISPFSkeletonParser_XMLOutput != null)) {
                columnValuesArray[2] = parentISPFSkeletonParserRowByISPFSkeletonParser_XMLOutput[3];
            }
            rowXMLOutputRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowXMLOutputRow);
            return rowXMLOutputRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            XMLOutputDataTable cln = ((XMLOutputDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new XMLOutputDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnXMLOutputFolder = base.Columns["XMLOutputFolder"];
            this.columnXMLOutputHLQ = base.Columns["XMLOutputHLQ"];
            this.columnISPFSkeletonParser_Id = base.Columns["ISPFSkeletonParser_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnXMLOutputFolder = new global::System.Data.DataColumn("XMLOutputFolder", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnXMLOutputFolder);
            this.columnXMLOutputHLQ = new global::System.Data.DataColumn("XMLOutputHLQ", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnXMLOutputHLQ);
            this.columnISPFSkeletonParser_Id = new global::System.Data.DataColumn("ISPFSkeletonParser_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnISPFSkeletonParser_Id);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public XMLOutputRow NewXMLOutputRow() {
            return ((XMLOutputRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new XMLOutputRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(XMLOutputRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.XMLOutputRowChanged != null)) {
                this.XMLOutputRowChanged(this, new XMLOutputRowChangeEvent(((XMLOutputRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.XMLOutputRowChanging != null)) {
                this.XMLOutputRowChanging(this, new XMLOutputRowChangeEvent(((XMLOutputRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.XMLOutputRowDeleted != null)) {
                this.XMLOutputRowDeleted(this, new XMLOutputRowChangeEvent(((XMLOutputRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.XMLOutputRowDeleting != null)) {
                this.XMLOutputRowDeleting(this, new XMLOutputRowChangeEvent(((XMLOutputRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveXMLOutputRow(XMLOutputRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "XMLOutputDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class FixedOutputDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnFixedOutputFolder;
        
        private global::System.Data.DataColumn columnFixedOutputHLQ;
        
        private global::System.Data.DataColumn columnFixedOutput_Id;
        
        private global::System.Data.DataColumn columnISPFSkeletonParser_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FixedOutputDataTable() {
            this.TableName = "FixedOutput";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal FixedOutputDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected FixedOutputDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn FixedOutputFolderColumn {
            get {
                return this.columnFixedOutputFolder;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn FixedOutputHLQColumn {
            get {
                return this.columnFixedOutputHLQ;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn FixedOutput_IdColumn {
            get {
                return this.columnFixedOutput_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ISPFSkeletonParser_IdColumn {
            get {
                return this.columnISPFSkeletonParser_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FixedOutputRow this[int index] {
            get {
                return ((FixedOutputRow)(this.Rows[index]));
            }
        }
        
        public event FixedOutputRowChangeEventHandler FixedOutputRowChanging;
        
        public event FixedOutputRowChangeEventHandler FixedOutputRowChanged;
        
        public event FixedOutputRowChangeEventHandler FixedOutputRowDeleting;
        
        public event FixedOutputRowChangeEventHandler FixedOutputRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddFixedOutputRow(FixedOutputRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FixedOutputRow AddFixedOutputRow(string FixedOutputFolder, string FixedOutputHLQ, ISPFSkeletonParserRow parentISPFSkeletonParserRowByISPFSkeletonParser_FixedOutput) {
            FixedOutputRow rowFixedOutputRow = ((FixedOutputRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    FixedOutputFolder,
                    FixedOutputHLQ,
                    null,
                    null};
            if ((parentISPFSkeletonParserRowByISPFSkeletonParser_FixedOutput != null)) {
                columnValuesArray[3] = parentISPFSkeletonParserRowByISPFSkeletonParser_FixedOutput[3];
            }
            rowFixedOutputRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowFixedOutputRow);
            return rowFixedOutputRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            FixedOutputDataTable cln = ((FixedOutputDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new FixedOutputDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnFixedOutputFolder = base.Columns["FixedOutputFolder"];
            this.columnFixedOutputHLQ = base.Columns["FixedOutputHLQ"];
            this.columnFixedOutput_Id = base.Columns["FixedOutput_Id"];
            this.columnISPFSkeletonParser_Id = base.Columns["ISPFSkeletonParser_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnFixedOutputFolder = new global::System.Data.DataColumn("FixedOutputFolder", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnFixedOutputFolder);
            this.columnFixedOutputHLQ = new global::System.Data.DataColumn("FixedOutputHLQ", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnFixedOutputHLQ);
            this.columnFixedOutput_Id = new global::System.Data.DataColumn("FixedOutput_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnFixedOutput_Id);
            this.columnISPFSkeletonParser_Id = new global::System.Data.DataColumn("ISPFSkeletonParser_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnISPFSkeletonParser_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnFixedOutput_Id}, true));
            this.columnFixedOutput_Id.AutoIncrement = true;
            this.columnFixedOutput_Id.AllowDBNull = false;
            this.columnFixedOutput_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FixedOutputRow NewFixedOutputRow() {
            return ((FixedOutputRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new FixedOutputRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(FixedOutputRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.FixedOutputRowChanged != null)) {
                this.FixedOutputRowChanged(this, new FixedOutputRowChangeEvent(((FixedOutputRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.FixedOutputRowChanging != null)) {
                this.FixedOutputRowChanging(this, new FixedOutputRowChangeEvent(((FixedOutputRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.FixedOutputRowDeleted != null)) {
                this.FixedOutputRowDeleted(this, new FixedOutputRowChangeEvent(((FixedOutputRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.FixedOutputRowDeleting != null)) {
                this.FixedOutputRowDeleting(this, new FixedOutputRowChangeEvent(((FixedOutputRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveFixedOutputRow(FixedOutputRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "FixedOutputDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class ConfigurationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnConfigurationName;
        
        private global::System.Data.DataColumn columnConfigurationNumber;
        
        private global::System.Data.DataColumn columnFixedOutput_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ConfigurationDataTable() {
            this.TableName = "Configuration";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal ConfigurationDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ConfigurationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ConfigurationNameColumn {
            get {
                return this.columnConfigurationName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ConfigurationNumberColumn {
            get {
                return this.columnConfigurationNumber;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn FixedOutput_IdColumn {
            get {
                return this.columnFixedOutput_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ConfigurationRow this[int index] {
            get {
                return ((ConfigurationRow)(this.Rows[index]));
            }
        }
        
        public event ConfigurationRowChangeEventHandler ConfigurationRowChanging;
        
        public event ConfigurationRowChangeEventHandler ConfigurationRowChanged;
        
        public event ConfigurationRowChangeEventHandler ConfigurationRowDeleting;
        
        public event ConfigurationRowChangeEventHandler ConfigurationRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddConfigurationRow(ConfigurationRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ConfigurationRow AddConfigurationRow(string ConfigurationName, string ConfigurationNumber, FixedOutputRow parentFixedOutputRowByFixedOutput_Configuration) {
            ConfigurationRow rowConfigurationRow = ((ConfigurationRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    ConfigurationName,
                    ConfigurationNumber,
                    null};
            if ((parentFixedOutputRowByFixedOutput_Configuration != null)) {
                columnValuesArray[2] = parentFixedOutputRowByFixedOutput_Configuration[2];
            }
            rowConfigurationRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowConfigurationRow);
            return rowConfigurationRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            ConfigurationDataTable cln = ((ConfigurationDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new ConfigurationDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnConfigurationName = base.Columns["ConfigurationName"];
            this.columnConfigurationNumber = base.Columns["ConfigurationNumber"];
            this.columnFixedOutput_Id = base.Columns["FixedOutput_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnConfigurationName = new global::System.Data.DataColumn("ConfigurationName", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnConfigurationName);
            this.columnConfigurationNumber = new global::System.Data.DataColumn("ConfigurationNumber", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnConfigurationNumber);
            this.columnFixedOutput_Id = new global::System.Data.DataColumn("FixedOutput_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnFixedOutput_Id);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ConfigurationRow NewConfigurationRow() {
            return ((ConfigurationRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new ConfigurationRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(ConfigurationRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.ConfigurationRowChanged != null)) {
                this.ConfigurationRowChanged(this, new ConfigurationRowChangeEvent(((ConfigurationRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.ConfigurationRowChanging != null)) {
                this.ConfigurationRowChanging(this, new ConfigurationRowChangeEvent(((ConfigurationRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.ConfigurationRowDeleted != null)) {
                this.ConfigurationRowDeleted(this, new ConfigurationRowChangeEvent(((ConfigurationRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.ConfigurationRowDeleting != null)) {
                this.ConfigurationRowDeleting(this, new ConfigurationRowChangeEvent(((ConfigurationRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveConfigurationRow(ConfigurationRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "ConfigurationDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class IgnoreSkelDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnIgnoreSkel_Text;
        
        private global::System.Data.DataColumn columnISPFSkeletonParser_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IgnoreSkelDataTable() {
            this.TableName = "IgnoreSkel";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal IgnoreSkelDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected IgnoreSkelDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn IgnoreSkel_TextColumn {
            get {
                return this.columnIgnoreSkel_Text;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ISPFSkeletonParser_IdColumn {
            get {
                return this.columnISPFSkeletonParser_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IgnoreSkelRow this[int index] {
            get {
                return ((IgnoreSkelRow)(this.Rows[index]));
            }
        }
        
        public event IgnoreSkelRowChangeEventHandler IgnoreSkelRowChanging;
        
        public event IgnoreSkelRowChangeEventHandler IgnoreSkelRowChanged;
        
        public event IgnoreSkelRowChangeEventHandler IgnoreSkelRowDeleting;
        
        public event IgnoreSkelRowChangeEventHandler IgnoreSkelRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddIgnoreSkelRow(IgnoreSkelRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IgnoreSkelRow AddIgnoreSkelRow(string IgnoreSkel_Text, ISPFSkeletonParserRow parentISPFSkeletonParserRowByISPFSkeletonParser_IgnoreSkel) {
            IgnoreSkelRow rowIgnoreSkelRow = ((IgnoreSkelRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    IgnoreSkel_Text,
                    null};
            if ((parentISPFSkeletonParserRowByISPFSkeletonParser_IgnoreSkel != null)) {
                columnValuesArray[1] = parentISPFSkeletonParserRowByISPFSkeletonParser_IgnoreSkel[3];
            }
            rowIgnoreSkelRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowIgnoreSkelRow);
            return rowIgnoreSkelRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            IgnoreSkelDataTable cln = ((IgnoreSkelDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new IgnoreSkelDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnIgnoreSkel_Text = base.Columns["IgnoreSkel_Text"];
            this.columnISPFSkeletonParser_Id = base.Columns["ISPFSkeletonParser_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnIgnoreSkel_Text = new global::System.Data.DataColumn("IgnoreSkel_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
            base.Columns.Add(this.columnIgnoreSkel_Text);
            this.columnISPFSkeletonParser_Id = new global::System.Data.DataColumn("ISPFSkeletonParser_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnISPFSkeletonParser_Id);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IgnoreSkelRow NewIgnoreSkelRow() {
            return ((IgnoreSkelRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new IgnoreSkelRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(IgnoreSkelRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.IgnoreSkelRowChanged != null)) {
                this.IgnoreSkelRowChanged(this, new IgnoreSkelRowChangeEvent(((IgnoreSkelRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.IgnoreSkelRowChanging != null)) {
                this.IgnoreSkelRowChanging(this, new IgnoreSkelRowChangeEvent(((IgnoreSkelRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.IgnoreSkelRowDeleted != null)) {
                this.IgnoreSkelRowDeleted(this, new IgnoreSkelRowChangeEvent(((IgnoreSkelRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.IgnoreSkelRowDeleting != null)) {
                this.IgnoreSkelRowDeleting(this, new IgnoreSkelRowChangeEvent(((IgnoreSkelRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveIgnoreSkelRow(IgnoreSkelRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "IgnoreSkelDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class UnimbeddedDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnSkeleton;
        
        private global::System.Data.DataColumn columnParent;
        
        private global::System.Data.DataColumn columnNOFT;
        
        private global::System.Data.DataColumn columnOPT;
        
        private global::System.Data.DataColumn columnEXT;
        
        private global::System.Data.DataColumn columnISPFSkeletonParser_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UnimbeddedDataTable() {
            this.TableName = "Unimbedded";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal UnimbeddedDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected UnimbeddedDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn SkeletonColumn {
            get {
                return this.columnSkeleton;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ParentColumn {
            get {
                return this.columnParent;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn NOFTColumn {
            get {
                return this.columnNOFT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn OPTColumn {
            get {
                return this.columnOPT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn EXTColumn {
            get {
                return this.columnEXT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ISPFSkeletonParser_IdColumn {
            get {
                return this.columnISPFSkeletonParser_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UnimbeddedRow this[int index] {
            get {
                return ((UnimbeddedRow)(this.Rows[index]));
            }
        }
        
        public event UnimbeddedRowChangeEventHandler UnimbeddedRowChanging;
        
        public event UnimbeddedRowChangeEventHandler UnimbeddedRowChanged;
        
        public event UnimbeddedRowChangeEventHandler UnimbeddedRowDeleting;
        
        public event UnimbeddedRowChangeEventHandler UnimbeddedRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddUnimbeddedRow(UnimbeddedRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UnimbeddedRow AddUnimbeddedRow(string Skeleton, string Parent, string NOFT, string OPT, string EXT, ISPFSkeletonParserRow parentISPFSkeletonParserRowByISPFSkeletonParser_Unimbedded) {
            UnimbeddedRow rowUnimbeddedRow = ((UnimbeddedRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    Skeleton,
                    Parent,
                    NOFT,
                    OPT,
                    EXT,
                    null};
            if ((parentISPFSkeletonParserRowByISPFSkeletonParser_Unimbedded != null)) {
                columnValuesArray[5] = parentISPFSkeletonParserRowByISPFSkeletonParser_Unimbedded[3];
            }
            rowUnimbeddedRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowUnimbeddedRow);
            return rowUnimbeddedRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            UnimbeddedDataTable cln = ((UnimbeddedDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new UnimbeddedDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnSkeleton = base.Columns["Skeleton"];
            this.columnParent = base.Columns["Parent"];
            this.columnNOFT = base.Columns["NOFT"];
            this.columnOPT = base.Columns["OPT"];
            this.columnEXT = base.Columns["EXT"];
            this.columnISPFSkeletonParser_Id = base.Columns["ISPFSkeletonParser_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnSkeleton = new global::System.Data.DataColumn("Skeleton", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnSkeleton);
            this.columnParent = new global::System.Data.DataColumn("Parent", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnParent);
            this.columnNOFT = new global::System.Data.DataColumn("NOFT", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnNOFT);
            this.columnOPT = new global::System.Data.DataColumn("OPT", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnOPT);
            this.columnEXT = new global::System.Data.DataColumn("EXT", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnEXT);
            this.columnISPFSkeletonParser_Id = new global::System.Data.DataColumn("ISPFSkeletonParser_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnISPFSkeletonParser_Id);
            this.columnSkeleton.Namespace = "";
            this.columnParent.Namespace = "";
            this.columnNOFT.Namespace = "";
            this.columnOPT.Namespace = "";
            this.columnEXT.Namespace = "";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UnimbeddedRow NewUnimbeddedRow() {
            return ((UnimbeddedRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new UnimbeddedRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(UnimbeddedRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.UnimbeddedRowChanged != null)) {
                this.UnimbeddedRowChanged(this, new UnimbeddedRowChangeEvent(((UnimbeddedRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.UnimbeddedRowChanging != null)) {
                this.UnimbeddedRowChanging(this, new UnimbeddedRowChangeEvent(((UnimbeddedRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.UnimbeddedRowDeleted != null)) {
                this.UnimbeddedRowDeleted(this, new UnimbeddedRowChangeEvent(((UnimbeddedRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.UnimbeddedRowDeleting != null)) {
                this.UnimbeddedRowDeleting(this, new UnimbeddedRowChangeEvent(((UnimbeddedRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveUnimbeddedRow(UnimbeddedRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "UnimbeddedDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class ISPFSkeletonParserRow : global::System.Data.DataRow {
        
        private ISPFSkeletonParserDataTable tableISPFSkeletonParser;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal ISPFSkeletonParserRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableISPFSkeletonParser = ((ISPFSkeletonParserDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string QueryDisplayName {
            get {
                try {
                    return ((string)(this[this.tableISPFSkeletonParser.QueryDisplayNameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'QueryDisplayName\' in table \'ISPFSkeletonParser\' is DBNull.", e);
                }
            }
            set {
                this[this.tableISPFSkeletonParser.QueryDisplayNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ImbedRecurseFail {
            get {
                try {
                    return ((string)(this[this.tableISPFSkeletonParser.ImbedRecurseFailColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'ImbedRecurseFail\' in table \'ISPFSkeletonParser\' is DBNull.", e);
                }
            }
            set {
                this[this.tableISPFSkeletonParser.ImbedRecurseFailColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string DebugInputLine {
            get {
                try {
                    return ((string)(this[this.tableISPFSkeletonParser.DebugInputLineColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'DebugInputLine\' in table \'ISPFSkeletonParser\' is DBNull.", e);
                }
            }
            set {
                this[this.tableISPFSkeletonParser.DebugInputLineColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int ISPFSkeletonParser_Id {
            get {
                return ((int)(this[this.tableISPFSkeletonParser.ISPFSkeletonParser_IdColumn]));
            }
            set {
                this[this.tableISPFSkeletonParser.ISPFSkeletonParser_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsQueryDisplayNameNull() {
            return this.IsNull(this.tableISPFSkeletonParser.QueryDisplayNameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetQueryDisplayNameNull() {
            this[this.tableISPFSkeletonParser.QueryDisplayNameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsImbedRecurseFailNull() {
            return this.IsNull(this.tableISPFSkeletonParser.ImbedRecurseFailColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetImbedRecurseFailNull() {
            this[this.tableISPFSkeletonParser.ImbedRecurseFailColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsDebugInputLineNull() {
            return this.IsNull(this.tableISPFSkeletonParser.DebugInputLineColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetDebugInputLineNull() {
            this[this.tableISPFSkeletonParser.DebugInputLineColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DirectoryRow[] GetDirectoryRows() {
            if ((this.Table.ChildRelations["ISPFSkeletonParser_Directory"] == null)) {
                return new DirectoryRow[0];
            }
            else {
                return ((DirectoryRow[])(base.GetChildRows(this.Table.ChildRelations["ISPFSkeletonParser_Directory"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ExcelOutputRow[] GetExcelOutputRows() {
            if ((this.Table.ChildRelations["ISPFSkeletonParser_ExcelOutput"] == null)) {
                return new ExcelOutputRow[0];
            }
            else {
                return ((ExcelOutputRow[])(base.GetChildRows(this.Table.ChildRelations["ISPFSkeletonParser_ExcelOutput"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public XMLOutputRow[] GetXMLOutputRows() {
            if ((this.Table.ChildRelations["ISPFSkeletonParser_XMLOutput"] == null)) {
                return new XMLOutputRow[0];
            }
            else {
                return ((XMLOutputRow[])(base.GetChildRows(this.Table.ChildRelations["ISPFSkeletonParser_XMLOutput"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FixedOutputRow[] GetFixedOutputRows() {
            if ((this.Table.ChildRelations["ISPFSkeletonParser_FixedOutput"] == null)) {
                return new FixedOutputRow[0];
            }
            else {
                return ((FixedOutputRow[])(base.GetChildRows(this.Table.ChildRelations["ISPFSkeletonParser_FixedOutput"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IgnoreSkelRow[] GetIgnoreSkelRows() {
            if ((this.Table.ChildRelations["ISPFSkeletonParser_IgnoreSkel"] == null)) {
                return new IgnoreSkelRow[0];
            }
            else {
                return ((IgnoreSkelRow[])(base.GetChildRows(this.Table.ChildRelations["ISPFSkeletonParser_IgnoreSkel"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UnimbeddedRow[] GetUnimbeddedRows() {
            if ((this.Table.ChildRelations["ISPFSkeletonParser_Unimbedded"] == null)) {
                return new UnimbeddedRow[0];
            }
            else {
                return ((UnimbeddedRow[])(base.GetChildRows(this.Table.ChildRelations["ISPFSkeletonParser_Unimbedded"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class DirectoryRow : global::System.Data.DataRow {
        
        private DirectoryDataTable tableDirectory;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal DirectoryRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableDirectory = ((DirectoryDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string DirectoryName {
            get {
                try {
                    return ((string)(this[this.tableDirectory.DirectoryNameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'DirectoryName\' in table \'Directory\' is DBNull.", e);
                }
            }
            set {
                this[this.tableDirectory.DirectoryNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string DirectoryLabel {
            get {
                try {
                    return ((string)(this[this.tableDirectory.DirectoryLabelColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'DirectoryLabel\' in table \'Directory\' is DBNull.", e);
                }
            }
            set {
                this[this.tableDirectory.DirectoryLabelColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string DirectoryHostName {
            get {
                try {
                    return ((string)(this[this.tableDirectory.DirectoryHostNameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'DirectoryHostName\' in table \'Directory\' is DBNull.", e);
                }
            }
            set {
                this[this.tableDirectory.DirectoryHostNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int ISPFSkeletonParser_Id {
            get {
                try {
                    return ((int)(this[this.tableDirectory.ISPFSkeletonParser_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'ISPFSkeletonParser_Id\' in table \'Directory\' is DBNull.", e);
                }
            }
            set {
                this[this.tableDirectory.ISPFSkeletonParser_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ISPFSkeletonParserRow ISPFSkeletonParserRow {
            get {
                return ((ISPFSkeletonParserRow)(this.GetParentRow(this.Table.ParentRelations["ISPFSkeletonParser_Directory"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["ISPFSkeletonParser_Directory"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsDirectoryNameNull() {
            return this.IsNull(this.tableDirectory.DirectoryNameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetDirectoryNameNull() {
            this[this.tableDirectory.DirectoryNameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsDirectoryLabelNull() {
            return this.IsNull(this.tableDirectory.DirectoryLabelColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetDirectoryLabelNull() {
            this[this.tableDirectory.DirectoryLabelColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsDirectoryHostNameNull() {
            return this.IsNull(this.tableDirectory.DirectoryHostNameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetDirectoryHostNameNull() {
            this[this.tableDirectory.DirectoryHostNameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsISPFSkeletonParser_IdNull() {
            return this.IsNull(this.tableDirectory.ISPFSkeletonParser_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetISPFSkeletonParser_IdNull() {
            this[this.tableDirectory.ISPFSkeletonParser_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class ExcelOutputRow : global::System.Data.DataRow {
        
        private ExcelOutputDataTable tableExcelOutput;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal ExcelOutputRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableExcelOutput = ((ExcelOutputDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ExcelOutputFolder {
            get {
                try {
                    return ((string)(this[this.tableExcelOutput.ExcelOutputFolderColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'ExcelOutputFolder\' in table \'ExcelOutput\' is DBNull.", e);
                }
            }
            set {
                this[this.tableExcelOutput.ExcelOutputFolderColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ExcelOutputHLQ {
            get {
                try {
                    return ((string)(this[this.tableExcelOutput.ExcelOutputHLQColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'ExcelOutputHLQ\' in table \'ExcelOutput\' is DBNull.", e);
                }
            }
            set {
                this[this.tableExcelOutput.ExcelOutputHLQColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int ISPFSkeletonParser_Id {
            get {
                try {
                    return ((int)(this[this.tableExcelOutput.ISPFSkeletonParser_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'ISPFSkeletonParser_Id\' in table \'ExcelOutput\' is DBNull.", e);
                }
            }
            set {
                this[this.tableExcelOutput.ISPFSkeletonParser_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ISPFSkeletonParserRow ISPFSkeletonParserRow {
            get {
                return ((ISPFSkeletonParserRow)(this.GetParentRow(this.Table.ParentRelations["ISPFSkeletonParser_ExcelOutput"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["ISPFSkeletonParser_ExcelOutput"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsExcelOutputFolderNull() {
            return this.IsNull(this.tableExcelOutput.ExcelOutputFolderColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetExcelOutputFolderNull() {
            this[this.tableExcelOutput.ExcelOutputFolderColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsExcelOutputHLQNull() {
            return this.IsNull(this.tableExcelOutput.ExcelOutputHLQColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetExcelOutputHLQNull() {
            this[this.tableExcelOutput.ExcelOutputHLQColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsISPFSkeletonParser_IdNull() {
            return this.IsNull(this.tableExcelOutput.ISPFSkeletonParser_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetISPFSkeletonParser_IdNull() {
            this[this.tableExcelOutput.ISPFSkeletonParser_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class XMLOutputRow : global::System.Data.DataRow {
        
        private XMLOutputDataTable tableXMLOutput;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal XMLOutputRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableXMLOutput = ((XMLOutputDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string XMLOutputFolder {
            get {
                try {
                    return ((string)(this[this.tableXMLOutput.XMLOutputFolderColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'XMLOutputFolder\' in table \'XMLOutput\' is DBNull.", e);
                }
            }
            set {
                this[this.tableXMLOutput.XMLOutputFolderColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string XMLOutputHLQ {
            get {
                try {
                    return ((string)(this[this.tableXMLOutput.XMLOutputHLQColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'XMLOutputHLQ\' in table \'XMLOutput\' is DBNull.", e);
                }
            }
            set {
                this[this.tableXMLOutput.XMLOutputHLQColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int ISPFSkeletonParser_Id {
            get {
                try {
                    return ((int)(this[this.tableXMLOutput.ISPFSkeletonParser_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'ISPFSkeletonParser_Id\' in table \'XMLOutput\' is DBNull.", e);
                }
            }
            set {
                this[this.tableXMLOutput.ISPFSkeletonParser_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ISPFSkeletonParserRow ISPFSkeletonParserRow {
            get {
                return ((ISPFSkeletonParserRow)(this.GetParentRow(this.Table.ParentRelations["ISPFSkeletonParser_XMLOutput"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["ISPFSkeletonParser_XMLOutput"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsXMLOutputFolderNull() {
            return this.IsNull(this.tableXMLOutput.XMLOutputFolderColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetXMLOutputFolderNull() {
            this[this.tableXMLOutput.XMLOutputFolderColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsXMLOutputHLQNull() {
            return this.IsNull(this.tableXMLOutput.XMLOutputHLQColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetXMLOutputHLQNull() {
            this[this.tableXMLOutput.XMLOutputHLQColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsISPFSkeletonParser_IdNull() {
            return this.IsNull(this.tableXMLOutput.ISPFSkeletonParser_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetISPFSkeletonParser_IdNull() {
            this[this.tableXMLOutput.ISPFSkeletonParser_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class FixedOutputRow : global::System.Data.DataRow {
        
        private FixedOutputDataTable tableFixedOutput;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal FixedOutputRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableFixedOutput = ((FixedOutputDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string FixedOutputFolder {
            get {
                try {
                    return ((string)(this[this.tableFixedOutput.FixedOutputFolderColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'FixedOutputFolder\' in table \'FixedOutput\' is DBNull.", e);
                }
            }
            set {
                this[this.tableFixedOutput.FixedOutputFolderColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string FixedOutputHLQ {
            get {
                try {
                    return ((string)(this[this.tableFixedOutput.FixedOutputHLQColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'FixedOutputHLQ\' in table \'FixedOutput\' is DBNull.", e);
                }
            }
            set {
                this[this.tableFixedOutput.FixedOutputHLQColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int FixedOutput_Id {
            get {
                return ((int)(this[this.tableFixedOutput.FixedOutput_IdColumn]));
            }
            set {
                this[this.tableFixedOutput.FixedOutput_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int ISPFSkeletonParser_Id {
            get {
                try {
                    return ((int)(this[this.tableFixedOutput.ISPFSkeletonParser_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'ISPFSkeletonParser_Id\' in table \'FixedOutput\' is DBNull.", e);
                }
            }
            set {
                this[this.tableFixedOutput.ISPFSkeletonParser_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ISPFSkeletonParserRow ISPFSkeletonParserRow {
            get {
                return ((ISPFSkeletonParserRow)(this.GetParentRow(this.Table.ParentRelations["ISPFSkeletonParser_FixedOutput"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["ISPFSkeletonParser_FixedOutput"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsFixedOutputFolderNull() {
            return this.IsNull(this.tableFixedOutput.FixedOutputFolderColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetFixedOutputFolderNull() {
            this[this.tableFixedOutput.FixedOutputFolderColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsFixedOutputHLQNull() {
            return this.IsNull(this.tableFixedOutput.FixedOutputHLQColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetFixedOutputHLQNull() {
            this[this.tableFixedOutput.FixedOutputHLQColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsISPFSkeletonParser_IdNull() {
            return this.IsNull(this.tableFixedOutput.ISPFSkeletonParser_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetISPFSkeletonParser_IdNull() {
            this[this.tableFixedOutput.ISPFSkeletonParser_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ConfigurationRow[] GetConfigurationRows() {
            if ((this.Table.ChildRelations["FixedOutput_Configuration"] == null)) {
                return new ConfigurationRow[0];
            }
            else {
                return ((ConfigurationRow[])(base.GetChildRows(this.Table.ChildRelations["FixedOutput_Configuration"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class ConfigurationRow : global::System.Data.DataRow {
        
        private ConfigurationDataTable tableConfiguration;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal ConfigurationRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableConfiguration = ((ConfigurationDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ConfigurationName {
            get {
                try {
                    return ((string)(this[this.tableConfiguration.ConfigurationNameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'ConfigurationName\' in table \'Configuration\' is DBNull.", e);
                }
            }
            set {
                this[this.tableConfiguration.ConfigurationNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ConfigurationNumber {
            get {
                try {
                    return ((string)(this[this.tableConfiguration.ConfigurationNumberColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'ConfigurationNumber\' in table \'Configuration\' is DBNull.", e);
                }
            }
            set {
                this[this.tableConfiguration.ConfigurationNumberColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int FixedOutput_Id {
            get {
                try {
                    return ((int)(this[this.tableConfiguration.FixedOutput_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'FixedOutput_Id\' in table \'Configuration\' is DBNull.", e);
                }
            }
            set {
                this[this.tableConfiguration.FixedOutput_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FixedOutputRow FixedOutputRow {
            get {
                return ((FixedOutputRow)(this.GetParentRow(this.Table.ParentRelations["FixedOutput_Configuration"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["FixedOutput_Configuration"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsConfigurationNameNull() {
            return this.IsNull(this.tableConfiguration.ConfigurationNameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetConfigurationNameNull() {
            this[this.tableConfiguration.ConfigurationNameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsConfigurationNumberNull() {
            return this.IsNull(this.tableConfiguration.ConfigurationNumberColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetConfigurationNumberNull() {
            this[this.tableConfiguration.ConfigurationNumberColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsFixedOutput_IdNull() {
            return this.IsNull(this.tableConfiguration.FixedOutput_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetFixedOutput_IdNull() {
            this[this.tableConfiguration.FixedOutput_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class IgnoreSkelRow : global::System.Data.DataRow {
        
        private IgnoreSkelDataTable tableIgnoreSkel;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal IgnoreSkelRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableIgnoreSkel = ((IgnoreSkelDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string IgnoreSkel_Text {
            get {
                try {
                    return ((string)(this[this.tableIgnoreSkel.IgnoreSkel_TextColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'IgnoreSkel_Text\' in table \'IgnoreSkel\' is DBNull.", e);
                }
            }
            set {
                this[this.tableIgnoreSkel.IgnoreSkel_TextColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int ISPFSkeletonParser_Id {
            get {
                try {
                    return ((int)(this[this.tableIgnoreSkel.ISPFSkeletonParser_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'ISPFSkeletonParser_Id\' in table \'IgnoreSkel\' is DBNull.", e);
                }
            }
            set {
                this[this.tableIgnoreSkel.ISPFSkeletonParser_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ISPFSkeletonParserRow ISPFSkeletonParserRow {
            get {
                return ((ISPFSkeletonParserRow)(this.GetParentRow(this.Table.ParentRelations["ISPFSkeletonParser_IgnoreSkel"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["ISPFSkeletonParser_IgnoreSkel"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsIgnoreSkel_TextNull() {
            return this.IsNull(this.tableIgnoreSkel.IgnoreSkel_TextColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetIgnoreSkel_TextNull() {
            this[this.tableIgnoreSkel.IgnoreSkel_TextColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsISPFSkeletonParser_IdNull() {
            return this.IsNull(this.tableIgnoreSkel.ISPFSkeletonParser_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetISPFSkeletonParser_IdNull() {
            this[this.tableIgnoreSkel.ISPFSkeletonParser_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class UnimbeddedRow : global::System.Data.DataRow {
        
        private UnimbeddedDataTable tableUnimbedded;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal UnimbeddedRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableUnimbedded = ((UnimbeddedDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Skeleton {
            get {
                try {
                    return ((string)(this[this.tableUnimbedded.SkeletonColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'Skeleton\' in table \'Unimbedded\' is DBNull.", e);
                }
            }
            set {
                this[this.tableUnimbedded.SkeletonColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Parent {
            get {
                try {
                    return ((string)(this[this.tableUnimbedded.ParentColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'Parent\' in table \'Unimbedded\' is DBNull.", e);
                }
            }
            set {
                this[this.tableUnimbedded.ParentColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string NOFT {
            get {
                try {
                    return ((string)(this[this.tableUnimbedded.NOFTColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'NOFT\' in table \'Unimbedded\' is DBNull.", e);
                }
            }
            set {
                this[this.tableUnimbedded.NOFTColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string OPT {
            get {
                try {
                    return ((string)(this[this.tableUnimbedded.OPTColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'OPT\' in table \'Unimbedded\' is DBNull.", e);
                }
            }
            set {
                this[this.tableUnimbedded.OPTColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string EXT {
            get {
                try {
                    return ((string)(this[this.tableUnimbedded.EXTColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'EXT\' in table \'Unimbedded\' is DBNull.", e);
                }
            }
            set {
                this[this.tableUnimbedded.EXTColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int ISPFSkeletonParser_Id {
            get {
                try {
                    return ((int)(this[this.tableUnimbedded.ISPFSkeletonParser_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'ISPFSkeletonParser_Id\' in table \'Unimbedded\' is DBNull.", e);
                }
            }
            set {
                this[this.tableUnimbedded.ISPFSkeletonParser_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ISPFSkeletonParserRow ISPFSkeletonParserRow {
            get {
                return ((ISPFSkeletonParserRow)(this.GetParentRow(this.Table.ParentRelations["ISPFSkeletonParser_Unimbedded"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["ISPFSkeletonParser_Unimbedded"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsSkeletonNull() {
            return this.IsNull(this.tableUnimbedded.SkeletonColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetSkeletonNull() {
            this[this.tableUnimbedded.SkeletonColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsParentNull() {
            return this.IsNull(this.tableUnimbedded.ParentColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetParentNull() {
            this[this.tableUnimbedded.ParentColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsNOFTNull() {
            return this.IsNull(this.tableUnimbedded.NOFTColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetNOFTNull() {
            this[this.tableUnimbedded.NOFTColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsOPTNull() {
            return this.IsNull(this.tableUnimbedded.OPTColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetOPTNull() {
            this[this.tableUnimbedded.OPTColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsEXTNull() {
            return this.IsNull(this.tableUnimbedded.EXTColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetEXTNull() {
            this[this.tableUnimbedded.EXTColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsISPFSkeletonParser_IdNull() {
            return this.IsNull(this.tableUnimbedded.ISPFSkeletonParser_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetISPFSkeletonParser_IdNull() {
            this[this.tableUnimbedded.ISPFSkeletonParser_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ISPFSkeletonParserRowChangeEvent : global::System.EventArgs {
        
        private ISPFSkeletonParserRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ISPFSkeletonParserRowChangeEvent(ISPFSkeletonParserRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ISPFSkeletonParserRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class DirectoryRowChangeEvent : global::System.EventArgs {
        
        private DirectoryRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DirectoryRowChangeEvent(DirectoryRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DirectoryRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ExcelOutputRowChangeEvent : global::System.EventArgs {
        
        private ExcelOutputRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ExcelOutputRowChangeEvent(ExcelOutputRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ExcelOutputRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class XMLOutputRowChangeEvent : global::System.EventArgs {
        
        private XMLOutputRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public XMLOutputRowChangeEvent(XMLOutputRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public XMLOutputRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class FixedOutputRowChangeEvent : global::System.EventArgs {
        
        private FixedOutputRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FixedOutputRowChangeEvent(FixedOutputRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FixedOutputRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ConfigurationRowChangeEvent : global::System.EventArgs {
        
        private ConfigurationRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ConfigurationRowChangeEvent(ConfigurationRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ConfigurationRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class IgnoreSkelRowChangeEvent : global::System.EventArgs {
        
        private IgnoreSkelRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IgnoreSkelRowChangeEvent(IgnoreSkelRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IgnoreSkelRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class UnimbeddedRowChangeEvent : global::System.EventArgs {
        
        private UnimbeddedRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UnimbeddedRowChangeEvent(UnimbeddedRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UnimbeddedRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
}
